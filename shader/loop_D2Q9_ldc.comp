// --- COMP ---
#version 450 core

// input uniforms
layout( push_constant ) uniform Push_Constant {
    int ping;
    int values_per_cell;
} pc;

// uniform buffer
layout( std140, binding = 5 ) uniform Compute_UBO {
    float   omega;            // collision frequency
    float   wall_velocity;
    int     wall_thickness;
    int     comp_index;
    vec2    mouse;
    vec2    force;
    int     force_type;
};

// specialization constants for local work group size
layout( local_size_x_id = 0 ) in;
//layout( local_size_y_id = 1 ) in;
//layout( local_size_z_id = 2 ) in;

// local work group defaults, when constants are not defined
layout( local_size_x = 256 ) in;
layout( local_size_y =   1 ) in;
layout( local_size_z =   1 ) in;

// specialization constants for init or loop phase
layout( constant_id = 3 ) const uint ALGORITHM = 0;
#define LOOP_SRT_LBGK       0
#define LOOP_TRT            1
#define LOOP_MRT            2
#define LOOP_CASCADED       3
#define LOOP_CASCADED_DRAG  4


// populations 1 single buffered rest velocity, 8 double buffered link velocities
layout( binding = 2, r32f  ) uniform restrict imageBuffer popul_buffer;

// velocity and density write target, will be rendered as texture in next pass
layout( binding = 3, rgba32f ) uniform restrict /*writeonly*/ image2DArray vel_rho_img;


// population indexes
// 6 2 5 //
//  \|/  //
// 3-0-1 //
//  /|\  //
// 7 4 8 //

// population weights:  R       E       N       W       S       NE      NW      SW      SE
const float[9] pw = {   4.0/9,  1.0/9,  1.0/9,  1.0/9,  1.0/9,  1.0/36, 1.0/36, 1.0/36, 1.0/36 };
const vec2[9]  pd = {   vec2(0), 
                        vec2(1, 0), vec2( 0,-1), vec2(-1,0), vec2(0,1), 
                        vec2(1,-1), vec2(-1,-1), vec2(-1,1), vec2(1,1) };


////////////////////////////////////////////////////////
// Common Indexes and Counts for VkImage and VkBuffer //
////////////////////////////////////////////////////////

// shortcut to imageSize, the Domain of the computation, same as Global Size
#define D imageSize( vel_rho_img )
//#define D ivec3( gl_NumWorkGroups * gl_WorkGroupSize )
// to reconstruct the domain size from these values the dispatch function
// vkCmdDispatch must be 3D as well, check in resources

// define access indexes for the population buffers
// #define ping ( 8 * pc.ping )
// #define pong ( 8 -    ping )


//////////////////////////////////////////
// Indexes and Counts if using VkBuffer //
//////////////////////////////////////////

// We use one rest position and two times the stream populations due to double buffering
// loading populations p with variable ping = 0 V 8 and storing with pong = 8 V 0
// All populations are stored in one continuous float array/buffer
// first come N rest populations then N east, N north, ...etc.,
// With the index variable I = [0..N) we can reach individual velocities of population interval at p
// We load and store rest populations with index I
// load stream populations index ( ping + 1 ) * N + I and store with ( pong + 1 ) * N + I
// with this we reach the population of any node
// the 2D output image is accessed simply with ivec2( X, Y )

// define global equivalent for gl_LocalInvocationIndex
#define UI gl_GlobalInvocationID.x

// U and I are also the index velocity population index
#define I int( UI )
//#define I int(( gl_NumWorkGroups.x * gl_WorkGroupID.y + gl_WorkGroupID.x ) * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationIndex )

#define X ( I % D.x )
#define Y ( I / D.x )
#define Z ( I / ( D.x * D.y ))

//#define X gl_GlobalInvocationID.x
//#define Y gl_GlobalInvocationID.y
//#define Z gl_GlobalInvocationID.z
//#define I int( D.x * Y + X )

// derived total count of nodes
int cell_count = int( gl_WorkGroupSize.x * gl_NumWorkGroups.x );
#define buffer_size ( pc.values_per_cell * cell_count )  // count of elements in the passed in buffer, required for periodic boundary conditions

//#define tau 0.50001 //0.6
//#define w (1.f/tau)
//#define tau 0.50001
#define w omega
#define wb 1
#define w3 1
#define w4 1


// main simulation function
void main( void ) {

    // the count of step per draw is stored in the upper 24 bits of the ALGORITHM constant
    // only if this value is 1, pc.ping is alternating between 0 and 1
    // otherwise is greater than 1 it stores the step size of one command buffer submission
    // hence the ping value must be computed accordingly 
    int ping;
    if(( ALGORITHM >> 8 ) > 1 )
        ping = 8 * (( pc.ping + comp_index ) % 2 );
    else
        ping = 8 * pc.ping;
    int pong = 8 -    ping;

    // population indexes
    // 6 2 5 //
    //  \|/  //
    // 3-0-1 //
    //  /|\  //
    // 7 4 8 //

    //
    // load populations including streaming in a gather fashion
    //

    // Deltas in 3D
    #define DX 1
    #define DY D.x
    #define DZ ( D.x * D.y )

    // read from the ping population p of the current cell index, while the cell index can still be offset
    #define POP(p) (( ping + p ) * cell_count + I )
    #define POPXY(p, xx, yy) (( ping + p ) * cell_count + D.x * yy + xx )
    #define MOX(v) ((  D.x + v + X ) % D.x )
    #define MOY(v) ((  D.y + v + Y ) % D.y )

    float f[9] = {// boundaries:                                    bback    :   no boundary streaming
        imageLoad( popul_buffer,                                                     I            ).r,
        imageLoad( popul_buffer, X ==       0                   ?   POP(3)   :   POP(1) - DX      ).r,
        imageLoad( popul_buffer, Y == D.y - 1                   ?   POP(4)   :   POP(2)      + DY ).r,
        imageLoad( popul_buffer, X == D.x - 1                   ?   POP(1)   :   POP(3) + DX      ).r,
        imageLoad( popul_buffer, Y ==       0                   ?   POP(2)   :   POP(4)      - DY ).r,
        imageLoad( popul_buffer, X ==       0 || Y == D.y - 1   ?   POP(7)   :   POP(5) - DX + DY ).r,
        imageLoad( popul_buffer, Y == D.y - 1 || X == D.x - 1   ?   POP(8)   :   POP(6) + DX + DY ).r,
        imageLoad( popul_buffer, X == D.x - 1 || Y ==       0   ?   POP(5)   :   POP(7) + DX - DY ).r,
        imageLoad( popul_buffer, Y ==       0 || X ==       0   ?   POP(6)   :   POP(8) - DX - DY ).r,
    };



    // compute macroscopic density before applying wall velocity (should be the same before and after)
    float rho = f[0] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8];


    // mouse force
    if( force_type > 0 ) {
        
        float   force_rad = 32;
        vec2    force_dir = vec2( X, Y ) - mouse;
        float   force_mag = max( 0, force_rad - dot( force_dir, force_dir )) / ( force_rad * force_rad );

        f[1]  += force_mag * 2 * pw[1] * rho * dot( pd[1], force );
        f[2]  += force_mag * 2 * pw[2] * rho * dot( pd[2], force );
        f[3]  += force_mag * 2 * pw[3] * rho * dot( pd[3], force );
        f[4]  += force_mag * 2 * pw[4] * rho * dot( pd[4], force );
        f[5]  += force_mag * 2 * pw[5] * rho * dot( pd[5], force );
        f[6]  += force_mag * 2 * pw[6] * rho * dot( pd[6], force );
        f[7]  += force_mag * 2 * pw[7] * rho * dot( pd[7], force );
        f[8]  += force_mag * 2 * pw[8] * rho * dot( pd[8], force );

    }

    // 6 2 5 //
    //  \|/  //
    // 3-0-1 //
    //  /|\  //
    // 7 4 8 //

    // Ladd's momentum correction for moving walls, applied to reflected populations not perpendicular to wall velocity
    if( Y >= D.y - wall_thickness ) {   // Handle top wall speed - 2 * w_i * rho * dot( c_i, u_w ) / c_s ^ 2
        f[5] += 2 * pw[5] * rho * wall_velocity;
        f[6] -= 2 * pw[6] * rho * wall_velocity;
    }
    /*
    else

    if( Y < wall_thickness ) {          // Handle bottom wall speed - 2 * w_i * rho * dot( c_i, u_w ) / c_s ^ 2
        f[5] += 2 * pw[5] * rho * wall_velocity;
        f[6] -= 2 * pw[6] * rho * wall_velocity;
    }


    if( X < wall_thickness ) {          // Handle left wall speed - 2 * w_i * rho * dot( c_i, u_w ) / c_s ^ 2
        f[5] += 2 * pw[5] * rho * wall_velocity;
        f[8] -= 2 * pw[8] * rho * wall_velocity;
    }
    
    else

    if( X >= D.x - wall_thickness ) {   // Handle right wall speed - 2 * w_i * rho * dot( c_i, u_w ) / c_s ^ 2
        f[6] += 2 * pw[6] * rho * wall_velocity;
        f[7] -= 2 * pw[7] * rho * wall_velocity;
    }
    //*/

    /*
    // Left half of top Wall moves to the right and right half moves to the left
    if( Y >= D.y - wall_thickness ) {   // Handle top wall speed - 2 * w_i * rho * dot( c_i, u_w ) / c_s ^ 2
        if( X < ( D.x >> 1 )) {         // D.x / 2
            f[5] += 2 * pw[5] * rho * wall_velocity;
            f[6] -= 2 * pw[6] * rho * wall_velocity;
        } else {
            f[5] -= 2 * pw[5] * rho * wall_velocity;
            f[6] += 2 * pw[6] * rho * wall_velocity;
        }
    }
    //*/

    // compute macroscopic velocity after applying wall velocity
    vec2  vel = ( vec2(f[1],f[2]) - vec2(f[3],f[4]) + vec2(f[5]) - vec2(f[7]) + vec2(f[8],f[6]) - vec2(f[6],f[8])) / rho;

    // store properties in image
    if(( ALGORITHM >> 8 ) > 1 ) {
        /*
        // this variant is omitting data calculated in between display frames 
        if(( ALGORITHM >> 8 ) == pc.ping + 1 ) {
            imageStore( vel_rho_img, ivec3( X, Y, Z ), vec4( vel, 0, rho ));
        }
        /*/
        // this variant is accumulating data calculated in between display frames
        if( pc.ping == 0 ) {
            imageStore( vel_rho_img, ivec3( X, Y, Z ), vec4( vel, 0, rho ));
        } else {
            vec2 old_vel = imageLoad( vel_rho_img, ivec3( X, Y, Z )).xy;
            imageStore( vel_rho_img, ivec3( X, Y, Z ), vec4( old_vel + vel, 0, rho ));
        }
        //*/
    } else {
        imageStore( vel_rho_img, ivec3( X, Y, Z ), vec4( vel, 0, rho ));
    }



    //
    // Collision Algorithms (Compile Time if)
    //
    if(( ALGORITHM & 0xff ) == LOOP_SRT_LBGK ) {

        // compute equilibrium
        #define X_P_Y ( vel.x + vel.y )
        #define X_M_Y ( vel.x - vel.y )
        #define V_X_2 ( 4.5 * vel.x * vel.x )
        #define V_Y_2 ( 4.5 * vel.y * vel.y )
        #define XPY_2 ( 4.5 * X_P_Y * X_P_Y )
        #define XMY_2 ( 4.5 * X_M_Y * X_M_Y )
        #define V_D_V ( 1.5 * dot( vel, vel ))

        float f_eq[9] = {                                    // #define SQ(x) ((x) * (x))
            pw[0] * rho * ( 1                     - V_D_V ), // pw[0] * rho * (1                                                   - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[1] * rho * ( 1 + 3 * vel.x + V_X_2 - V_D_V ), // pw[1] * rho * (1 + 3 * ( vel.x)         + 4.5 * SQ( vel.x)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[2] * rho * ( 1 + 3 * vel.y + V_Y_2 - V_D_V ), // pw[2] * rho * (1 + 3 * ( vel.y)         + 4.5 * SQ( vel.y)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[3] * rho * ( 1 - 3 * vel.x + V_X_2 - V_D_V ), // pw[3] * rho * (1 + 3 * (-vel.x)         + 4.5 * SQ(-vel.x)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[4] * rho * ( 1 - 3 * vel.y + V_Y_2 - V_D_V ), // pw[4] * rho * (1 + 3 * (-vel.y)         + 4.5 * SQ(-vel.y)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[5] * rho * ( 1 + 3 * X_P_Y + XPY_2 - V_D_V ), // pw[5] * rho * (1 + 3 * ( vel.x + vel.y) + 4.5 * SQ( vel.x + vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[6] * rho * ( 1 - 3 * X_M_Y + XMY_2 - V_D_V ), // pw[6] * rho * (1 + 3 * (-vel.x + vel.y) + 4.5 * SQ(-vel.x + vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[7] * rho * ( 1 - 3 * X_P_Y + XPY_2 - V_D_V ), // pw[7] * rho * (1 + 3 * (-vel.x - vel.y) + 4.5 * SQ(-vel.x - vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[8] * rho * ( 1 + 3 * X_M_Y + XMY_2 - V_D_V )  // pw[8] * rho * (1 + 3 * ( vel.x - vel.y) + 4.5 * SQ( vel.x - vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y)))
        };


        // Collide - might be optimized if using f0 and 2 * vec4
        f[0] = mix( f[0], f_eq[0], omega ); //f[0] * ( 1 - omega ) + f_eq[0] * omega;
        f[1] = mix( f[1], f_eq[1], omega ); //f[1] * ( 1 - omega ) + f_eq[1] * omega;
        f[2] = mix( f[2], f_eq[2], omega ); //f[2] * ( 1 - omega ) + f_eq[2] * omega;
        f[3] = mix( f[3], f_eq[3], omega ); //f[3] * ( 1 - omega ) + f_eq[3] * omega;
        f[4] = mix( f[4], f_eq[4], omega ); //f[4] * ( 1 - omega ) + f_eq[4] * omega;
        f[5] = mix( f[5], f_eq[5], omega ); //f[5] * ( 1 - omega ) + f_eq[5] * omega;
        f[6] = mix( f[6], f_eq[6], omega ); //f[6] * ( 1 - omega ) + f_eq[6] * omega;
        f[7] = mix( f[7], f_eq[7], omega ); //f[7] * ( 1 - omega ) + f_eq[7] * omega;
        f[8] = mix( f[8], f_eq[8], omega ); //f[8] * ( 1 - omega ) + f_eq[8] * omega;

    }



    else if(( ALGORITHM & 0xff ) == LOOP_TRT ) {

        // compute equilibrium
        #define X_P_Y ( vel.x + vel.y )
        #define X_M_Y ( vel.x - vel.y )
        #define V_X_2 ( 4.5 * vel.x * vel.x )
        #define V_Y_2 ( 4.5 * vel.y * vel.y )
        #define XPY_2 ( 4.5 * X_P_Y * X_P_Y )
        #define XMY_2 ( 4.5 * X_M_Y * X_M_Y )
        #define V_D_V ( 1.5 * dot( vel, vel ))

        float f_eq[9] = {                                    // #define SQ(x) ((x) * (x))
            pw[0] * rho * ( 1                     - V_D_V ), // pw[0] * rho * (1                                                   - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[1] * rho * ( 1 + 3 * vel.x + V_X_2 - V_D_V ), // pw[1] * rho * (1 + 3 * ( vel.x)         + 4.5 * SQ( vel.x)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[2] * rho * ( 1 + 3 * vel.y + V_Y_2 - V_D_V ), // pw[2] * rho * (1 + 3 * ( vel.y)         + 4.5 * SQ( vel.y)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[3] * rho * ( 1 - 3 * vel.x + V_X_2 - V_D_V ), // pw[3] * rho * (1 + 3 * (-vel.x)         + 4.5 * SQ(-vel.x)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[4] * rho * ( 1 - 3 * vel.y + V_Y_2 - V_D_V ), // pw[4] * rho * (1 + 3 * (-vel.y)         + 4.5 * SQ(-vel.y)         - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[5] * rho * ( 1 + 3 * X_P_Y + XPY_2 - V_D_V ), // pw[5] * rho * (1 + 3 * ( vel.x + vel.y) + 4.5 * SQ( vel.x + vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[6] * rho * ( 1 - 3 * X_M_Y + XMY_2 - V_D_V ), // pw[6] * rho * (1 + 3 * (-vel.x + vel.y) + 4.5 * SQ(-vel.x + vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[7] * rho * ( 1 - 3 * X_P_Y + XPY_2 - V_D_V ), // pw[7] * rho * (1 + 3 * (-vel.x - vel.y) + 4.5 * SQ(-vel.x - vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y))),
            pw[8] * rho * ( 1 + 3 * X_M_Y + XMY_2 - V_D_V )  // pw[8] * rho * (1 + 3 * ( vel.x - vel.y) + 4.5 * SQ( vel.x - vel.y) - 1.5 * (SQ(vel.x) + SQ(vel.y)))
        };

        // 6 2 5 //
        //  \|/  //
        // 3-0-1 //
        //  /|\  //
        // 7 4 8 //

        float f_p[9];
        f_p[0] = f[0];
        f_p[1] = 0.5 * ( f[1] + f[3] );
        f_p[2] = 0.5 * ( f[2] + f[4] );
        f_p[3] = f_p[1];
        f_p[4] = f_p[2];
        f_p[5] = 0.5 * ( f[5] + f[7] );
        f_p[6] = 0.5 * ( f[6] + f[8] );
        f_p[7] = f_p[5];
        f_p[8] = f_p[6];

        float f_m[9];
        f_m[0] = 0;
        f_m[1] = 0.5 * ( f[1] - f[3] );
        f_m[2] = 0.5 * ( f[2] - f[4] );
        f_m[3] = - f_m[1];
        f_m[4] = - f_m[2];
        f_m[5] = 0.5 * ( f[5] - f[7] );
        f_m[6] = 0.5 * ( f[6] - f[8] );
        f_m[7] = - f_m[5];
        f_m[8] = - f_m[6];

        float f_eq_p[9];
        f_eq_p[0] = f_eq[0];
        f_eq_p[1] = 0.5 * ( f_eq[1] + f_eq[3] );
        f_eq_p[2] = 0.5 * ( f_eq[2] + f_eq[4] );
        f_eq_p[3] = f_eq_p[1];
        f_eq_p[4] = f_eq_p[2];
        f_eq_p[5] = 0.5 * ( f_eq[5] + f_eq[7] );
        f_eq_p[6] = 0.5 * ( f_eq[6] + f_eq[8] );
        f_eq_p[7] = f_eq_p[5];
        f_eq_p[8] = f_eq_p[6];

        float f_eq_m[9];
        f_eq_m[0] = 0;
        f_eq_m[1] = 0.5 * ( f_eq[1] - f_eq[3] );
        f_eq_m[2] = 0.5 * ( f_eq[2] - f_eq[4] );
        f_eq_m[3] = - f_eq_m[1];
        f_eq_m[4] = - f_eq_m[2];
        f_eq_m[5] = 0.5 * ( f_eq[5] - f_eq[7] );
        f_eq_m[6] = 0.5 * ( f_eq[6] - f_eq[8] );
        f_eq_m[7] = - f_eq_m[5];
        f_eq_m[8] = - f_eq_m[6];

        #define omega_p omega
        #define Lambda 0.25
        float omega_m = ( 4 - omega_p ) / ( 4 * Lambda * omega_p + 2 - omega_p );
        // Collide - might be optimized if using f0 and 2 * vec4
        f[0] = f[0] - omega_p * ( f_p[0] - f_eq_p[0] ) - omega_m * ( f_m[0] - f_eq_m[0] ); //f[0] * ( 1 - omega ) + f_eq[0] * omega;
        f[1] = f[1] - omega_p * ( f_p[1] - f_eq_p[1] ) - omega_m * ( f_m[1] - f_eq_m[1] ); //f[1] * ( 1 - omega ) + f_eq[1] * omega;
        f[2] = f[2] - omega_p * ( f_p[2] - f_eq_p[2] ) - omega_m * ( f_m[2] - f_eq_m[2] ); //f[2] * ( 1 - omega ) + f_eq[2] * omega;
        f[3] = f[3] - omega_p * ( f_p[3] - f_eq_p[3] ) - omega_m * ( f_m[3] - f_eq_m[3] ); //f[3] * ( 1 - omega ) + f_eq[3] * omega;
        f[4] = f[4] - omega_p * ( f_p[4] - f_eq_p[4] ) - omega_m * ( f_m[4] - f_eq_m[4] ); //f[4] * ( 1 - omega ) + f_eq[4] * omega;
        f[5] = f[5] - omega_p * ( f_p[5] - f_eq_p[5] ) - omega_m * ( f_m[5] - f_eq_m[5] ); //f[5] * ( 1 - omega ) + f_eq[5] * omega;
        f[6] = f[6] - omega_p * ( f_p[6] - f_eq_p[6] ) - omega_m * ( f_m[6] - f_eq_m[6] ); //f[6] * ( 1 - omega ) + f_eq[6] * omega;
        f[7] = f[7] - omega_p * ( f_p[7] - f_eq_p[7] ) - omega_m * ( f_m[7] - f_eq_m[7] ); //f[7] * ( 1 - omega ) + f_eq[7] * omega;
        f[8] = f[8] - omega_p * ( f_p[8] - f_eq_p[8] ) - omega_m * ( f_m[8] - f_eq_m[8] ); //f[8] * ( 1 - omega ) + f_eq[8] * omega;

    }



    else if(( ALGORITHM & 0xff ) == LOOP_CASCADED || ( ALGORITHM & 0xff ) == LOOP_CASCADED_DRAG ) {

        #define vx vel.x
        #define vy vel.y
        #define f0 f[0]
        #define f1 f[1]
        #define f2 f[2]
        #define f3 f[3]
        #define f4 f[4]
        #define f5 f[5]
        #define f6 f[6]
        #define f7 f[7]
        #define f8 f[8]


        // with the following "hack" the cascaded LBM will be ALWAYS stable!
        if(( ALGORITHM & 0xff ) == LOOP_CASCADED_DRAG ) {
            #define NORM 0.42f
            float norm = length( vel );//sqrt(vx*vx+vy*vy);
            if( norm > NORM ) vel *=  NORM / norm;
        }


        // trace of the pressure tensor
        float T = 1/rho*((((-vx)*(-vx)))*f0+(((1-vx)*(1-vx)))*f1+(((-vx)*(-vx)))*f2+(((-1-vx)*(-1-vx)))*f3+(((-vx)*(-vx)))*f4+(((1-vx)*(1-vx)))*f5+(((-1-vx)*(-1-vx)))*f6+(((-1-vx)*(-1-vx)))*f7+(((1-vx)*(1-vx)))*f8)+1/rho*((((-vy)*(-vy)))*f0+(((-vy)*(-vy)))*f1+(((1-vy)*(1-vy)))*f2+(((-vy)*(-vy)))*f3+(((-1-vy)*(-1-vy)))*f4+(((1-vy)*(1-vy)))*f5+(((1-vy)*(1-vy)))*f6+(((-1-vy)*(-1-vy)))*f7+(((-1-vy)*(-1-vy)))*f8);

        // normal stress difference
        float N = 1/rho*((((-vx)*(-vx)))*f0+(((1-vx)*(1-vx)))*f1+(((-vx)*(-vx)))*f2+(((-1-vx)*(-1-vx)))*f3+(((-vx)*(-vx)))*f4+(((1-vx)*(1-vx)))*f5+(((-1-vx)*(-1-vx)))*f6+(((-1-vx)*(-1-vx)))*f7+(((1-vx)*(1-vx)))*f8)-(1/rho*((((-vy)*(-vy)))*f0+(((-vy)*(-vy)))*f1+(((1-vy)*(1-vy)))*f2+(((-vy)*(-vy)))*f3+(((-1-vy)*(-1-vy)))*f4+(((1-vy)*(1-vy)))*f5+(((1-vy)*(1-vy)))*f6+(((-1-vy)*(-1-vy)))*f7+(((-1-vy)*(-1-vy)))*f8));

        // off diagonal element of the stress tensor
        float Pxy = 1/rho*(((-vx)*(-vy))*f0+((1-vx)*(-vy))*f1+((-vx)*(1-vy))*f2+((-1-vx)*(-vy))*f3+((-vx)*(-1-vy))*f4+((1-vx)*(1-vy))*f5+((-1-vx)*(1-vy))*f6+((-1-vx)*(-1-vy))*f7+((1-vx)*(-1-vy))*f8);

        // first third order moment
        float Qyxx = 1/rho*((((-vx)*(-vx))*(-vy))*f0+(((1-vx)*(1-vx))*(-vy))*f1+(((-vx)*(-vx))*(1-vy))*f2+(((-1-vx)*(-1-vx))*(-vy))*f3+(((-vx)*(-vx))*(-1-vy))*f4+(((1-vx)*(1-vx))*(1-vy))*f5+(((-1-vx)*(-1-vx))*(1-vy))*f6+(((-1-vx)*(-1-vx))*(-1-vy))*f7+(((1-vx)*(1-vx))*(-1-vy))*f8);

        // second third order moment
        float Qxyy = 1/rho*(((-vx)*((-vy)*(-vy)))*f0+((1-vx)*((-vy)*(-vy)))*f1+((-vx)*((1-vy)*(1-vy)))*f2+((-1-vx)*((-vy)*(-vy)))*f3+((-vx)*((-1-vy)*(-1-vy)))*f4+((1-vx)*((1-vy)*(1-vy)))*f5+((-1-vx)*((1-vy)*(1-vy)))*f6+((-1-vx)*((-1-vy)*(-1-vy)))*f7+((1-vx)*((-1-vy)*(-1-vy)))*f8);

        // fourth order moment
        float A = 1/rho*((((-vx)*(-vx))*((-vy)*(-vy)))*f0+(((1-vx)*(1-vx))*((-vy)*(-vy)))*f1+(((-vx)*(-vx))*((1-vy)*(1-vy)))*f2+(((-1-vx)*(-1-vx))*((-vy)*(-vy)))*f3+(((-vx)*(-vx))*((-1-vy)*(-1-vy)))*f4+(((1-vx)*(1-vx))*((1-vy)*(1-vy)))*f5+(((-1-vx)*(-1-vx))*((1-vy)*(1-vy)))*f6+(((-1-vx)*(-1-vx))*((-1-vy)*(-1-vy)))*f7+(((1-vx)*(1-vx))*((-1-vy)*(-1-vy)))*f8);

        // === RELAX TOWARD EQUILIBRIUM ========================
        Pxy = (1-w)*Pxy;
        N = (1-w)*N;
        T = (1-wb)*T+0.66666666666667*wb;
        Qxyy = (1-w3)*Qxyy;
        Qyxx = (1-w3)*Qyxx;
        A = (1-w4)*A+0.11111111111111*w4;

        f[0] = rho*(1-(vx*vx+vy*vy)+4*vx*vy*Pxy-(((vx*vx-vy*vy)/2)*N)+((-2+vx*vx+vy*vy)/2)*T+2*vx*Qxyy+2*vy*Qyxx+A);
        f[1] = rho/2*(vx*vx+vx*(1-vy*vy)-((2*vy+4*vx*vy)*Pxy)+((1+vx+vx*vx-vy*vy)/2)*N+((1-vx-(vx*vx+vy*vy))/2)*T-((1+2*vx)*Qxyy)-2*vy*Qyxx-A);
        f[2] = rho/2*(vy*vy+vy*(1-vx*vx)-((2*vx+4*vx*vy)*Pxy)+((-1-vy+vx*vx-vy*vy)/2)*N+((1-vy-(vx*vx+vy*vy))/2)*T-((1+2*vy)*Qyxx)-2*vx*Qxyy-A);
        f[3] = rho/2*(vx*vx+(-vx)*(1-vy*vy)-((-2*vy+4*vx*vy)*Pxy)+((1-vx+vx*vx-vy*vy)/2)*N+((1-(-vx)-(vx*vx+vy*vy))/2)*T-((-1+2*vx)*Qxyy)-2*vy*Qyxx-A);
        f[4] = rho/2*(vy*vy+(-vy)*(1-vx*vx)-((-2*vx+4*vx*vy)*Pxy)+((-1-(-vy)+vx*vx-vy*vy)/2)*N+((1-(-vy)-(vx*vx+vy*vy))/2)*T-((-1+2*vy)*Qyxx)-2*vx*Qxyy-A);
        f[5] = rho/4*(vx*vy+vx*vy*vy+vy*vx*vx+(1+4*vx*vy+2*vy+2*vx)*Pxy+((-vx*vx+vy*vy-vx+vy)/2)*N+((vx*vx+vy*vy+vx+vy)/2)*T+(1+2*vx)*Qxyy+(1+2*vy)*Qyxx+A);
        f[6] = rho/4*((-vx)*vy+(-vx)*vy*vy+vy*vx*vx+(-1+4*vx*vy-2*vy+2*vx)*Pxy+((-vx*vx+vy*vy-(-vx)+vy)/2)*N+((vx*vx+vy*vy-vx+vy)/2)*T+(-1+2*vx)*Qxyy+(1+2*vy)*Qyxx+A);
        f[7] = rho/4*(vx*vy+(-vx)*vy*vy+(-vy)*vx*vx+(1+4*vx*vy-2*vy-2*vx)*Pxy+((-vx*vx+vy*vy-(-vx)-vy)/2)*N+((vx*vx+vy*vy-vx-vy)/2)*T+(-1+2*vx)*Qxyy+(-1+2*vy)*Qyxx+A);
        f[8] = rho/4*((-vx)*vy+vx*vy*vy+(-vy)*vx*vx+(-1+4*vx*vy+2*vy-2*vx)*Pxy+((-vx*vx+vy*vy-vx-vy)/2)*N+((vx*vx+vy*vy+vx-vy)/2)*T+(1+2*vx)*Qxyy+(-1+2*vy)*Qyxx+A);
    }



    // store populations
    imageStore( popul_buffer,                             I, vec4( f[0] ));
    imageStore( popul_buffer, ( pong + 1 ) * cell_count + I, vec4( f[1] ));
    imageStore( popul_buffer, ( pong + 2 ) * cell_count + I, vec4( f[2] ));
    imageStore( popul_buffer, ( pong + 3 ) * cell_count + I, vec4( f[3] ));
    imageStore( popul_buffer, ( pong + 4 ) * cell_count + I, vec4( f[4] ));
    imageStore( popul_buffer, ( pong + 5 ) * cell_count + I, vec4( f[5] ));
    imageStore( popul_buffer, ( pong + 6 ) * cell_count + I, vec4( f[6] ));
    imageStore( popul_buffer, ( pong + 7 ) * cell_count + I, vec4( f[7] ));
    imageStore( popul_buffer, ( pong + 8 ) * cell_count + I, vec4( f[8] ));

}   // main





/////////////////////////////////////////
// Indexes and Counts if using VkImage //
/////////////////////////////////////////
/*
// indexes velocity and density
#define UX gl_GlobalInvocationID.x
#define UY gl_GlobalInvocationID.y
#define UZ gl_GlobalInvocationID.z

#define X int( UX )
#define Y int( UY )
#define Z int( UZ )

// buffer offsets corresponding streaming ( in 2D so far )
int[9] buffer_offset = { 0, 1, -D.x, -1, D.x, 1 - D.x, -1 - D.x, -1 + D.x, 1 + D.x };

// stream function if not near boundary
void stream( int p, float f ) {
    int i = ( I + buffer_offset[ p ] + cell_count ) % cell_count;
    imageStore( popul_buf[ pong + p ], i, vec4( f ));
}

// bounce function if next to boundary and velocity is pointing towards it
void bounce( int p, float f ) {
    imageStore( popul_buf[ pong + inv[ p ] ], I, vec4( f ));
}
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////
// alternative access method using multi dim local work group size, currently not working properly //
/////////////////////////////////////////////////////////////////////////////////////////////////////

/*
// shortcut to imageSize, the Domain of the computation, same as Global Size
#define Domain ivec3( gl_WorkGroupSize * gl_NumWorkGroups )
#define D ( Domain )
//#define D imageSize( vel_rho_img )

#define GID ivec3( gl_GlobalInvocationID )
// define gl_WorkGroupIndex equivalent to gl_LocalInvocationIndex
// this is confirmed on CPU, where is the crux ???
uint work_group_index =
    gl_WorkGroupID.z * gl_NumWorkGroups.z * gl_NumWorkGroups.y +
    gl_WorkGroupID.y * gl_NumWorkGroups.x +
    gl_WorkGroupID.x;

// define linearization of the whole domain
int I = int(
    gl_WorkGroupSize.z *
    gl_WorkGroupSize.y *
    gl_WorkGroupSize.x * work_group_index + gl_LocalInvocationIndex );


#define X int( GID.x )
#define Y int( GID.y )
#define Z ( I / ( D.x * D.y ))
*/